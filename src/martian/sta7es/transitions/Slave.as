/*   Copyright (c) 2010 julien barbay <barbay.julien@gmail.com>   Permission is hereby granted, free of charge, to any person   obtaining a copy of this software and associated documentation   files (the "Software"), to deal in the Software without   restriction, including without limitation the rights to use,   copy, modify, merge, publish, distribute, sublicense, and/or sell   copies of the Software, and to permit persons to whom the   Software is furnished to do so, subject to the following   conditions:   The above copyright notice and this permission notice shall be   included in all copies or substantial portions of the Software.   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR   OTHER DEALINGS IN THE SOFTWARE. */package martian.sta7es.transitions{	import flash.display.DisplayObject;	import martian.m4gic.log;		import martian.ev3nts.helpers.on;		import martian.sta7es.core.Module;	import martian.sta7es.core.Transition;		public class Slave extends Transition	{		static public var DEBUG:Boolean = false;				public function Slave(a:DisplayObject, b:DisplayObject)		{			super(a, b);		}				override public function start():void		{			tell(Transition.START);						if (a is Module)			{				if (DEBUG) { log('Transition: module A hide() call. waiting for hidden event...'); }				on(a, Module.HIDDEN, swap);				a.hide();			}			else			{				swap();			}		}				private function swap():void		{			if (DEBUG) { log('Transition: module A hidden event caught !'); }						p.addChild(b);						if (b is Module)			{				tell(Transition.SWAP);								if (DEBUG) { log('Transition: module B show() call. waiting for shown event...'); }				on(b, Module.SHOWN, stop);				b.show();			}			else { stop(); }		}				private function stop():void		{			if (DEBUG) { log('Transition: module B shown event caught !'); }						p.swapChildren(a, b);			p.removeChild(a);						tell(Transition.STOP);						dispose();		}	}}