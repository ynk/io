/*Copyright (c) 2010 julien barbay <barbay.julien@gmail.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/package martian.sta7es{	import flash.display.*;			import flash.external.ExternalInterface;		import martian.daem0n.core.Daemon;		import martian.m4gic.log;		public class DeepLinking extends Daemon	{		public const READY:String = 'ready';		public const INTERNAL:String = 'internal';		public const EXTERNAL:String = 'external';			private var deeplinking:String = 'deeplinking';			private var _value:String;		private var _strict:Boolean;		private var queue:Array;		private var init:Boolean = false;		private var external:Boolean = true;								public var locked:Boolean = false;			public function lock():void { locked = true; }			public function unlock():void { locked = false; }				public function DeepLinking() { name = 'deeplinking'; }				public function hook(stage:Stage, active:Boolean = true):void		{			if (!$hook(stage, false)) { return; }						_value = '';			_strict = true;			queue = new Array();						if (active) { activate(); }		}				public function activate():void		{			if (!$activate()) { return; }			if (ExternalInterface.available)			{				if (ExternalInterface.call('function() { return (typeof(jQuery) != "undefined") }')) { deeplinking = '$.' + deeplinking; }								ExternalInterface.addCallback('deeplink', gateway);				ExternalInterface.call('function() { ' + deeplinking + '.initialize(); }');			}			else { $deactivate(); }		}				private function gateway(...args):String 		{			if (args.length == 0 || args[0] != READY || args[0] != INTERNAL || args[0] != EXTERNAL) { return 'undefined'; }						try { return tell.apply(args[0]); }			catch (e:Error) { return log(e.toString()); }						return '';		}				public function get value():String { return ExternalInterface.call('function() { return ' + deeplinking + '.value(); }') as String; }		public function set value(s:String):void { ExternalInterface.call('function() { ' + deeplinking + '.value("' + s + '"); }'); }						public function get path():Array { return ExternalInterface.call('function() { return ' + deeplinking + '.path(); }') as Array; }		public function get parameters():Object { return ExternalInterface.call('function() { return ' + deeplinking + '.parameters(); }') as Object; }				public function pipe(fn:String, ...args):void { log(ExternalInterface.call(fn, args)); }	}}